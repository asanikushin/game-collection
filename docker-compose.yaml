version: "3"

services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_DB: service
      POSTGRES_PASSWORD: ue3um2yRJA
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./service-data:/var/lib/postgresql/data

  auth_db:
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_DB: auth
      POSTGRES_PASSWORD: ue3um2yRJA
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./auth-data:/var/lib/postgresql/data

  service:
    build:
      context: .
      dockerfile: service/Dockerfile
    links:
      - auth
      - db
    environment:
      FLASK_ENV: config.ProductionConfig
      SQLALCHEMY_DATABASE_URI: "postgresql://admin:ue3um2yRJA@db:5432/service"
      AUTH_URL: auth
      AUTH_PORT: 5001
    ports:
      - 8081:8000

  auth:
    build:
      context: .
      dockerfile: auth/Dockerfile
    links:
      - auth_db
    environment:
      FLASK_ENV: config.ProductionConfig
      SQLALCHEMY_DATABASE_URI: "postgresql://admin:ue3um2yRJA@auth_db:5432/auth"
      REFRESH_TOKEN_EXPIRATION: "1H 30M"
      ACCESS_TOKEN_EXPIRATION: "30M"
      RABBITMQ: rabbitmq
      QUEUE: "notifications"
      CONFIRM_URL: "http://localhost:8082"
    ports:
      - 8082:5000

  notifications:
    build:
      context: .
      dockerfile: notifications/Dockerfile
    environment:
      SMTP_URL: emailmock
      RABBITMQ: rabbitmq
      QUEUE: "notifications"
      FROM_EMAIL: test@mock
    depends_on:
      - emailmock

  emailmock:
    build: mock-smtp
    volumes:
      - ./.emails:/var/lib/mock-smtp

  rabbitmq:
    image: rabbitmq:3-management
